import time
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support import expected_conditions as EC
from steam import Steam
from decouple import config
from datetime import datetime
from langdetect import detect
import xlsxwriter
import math

KEY = config('STEAM_API_KEY')
steam = Steam(KEY)

class WorkshopItem:
    def __init__(self, title, authorID, authorName, detectedLanguage, country, date_posted, tags, itemType):
        self.title = title
        self.authorID = authorID
        self.authorName = authorName
        self.detectedLanguage = detectedLanguage
        self.country = country
        self.date_posted = date_posted
        self.tags = tags
        self.itemType = itemType
def GetAmountOfItems():
    wait.until(lambda driver: len(driver.find_elements(By.CSS_SELECTOR, 'div.workshopBrowsePagingInfo')) > 0)
    itemCountText = driver.find_element(By.CSS_SELECTOR, 'div.workshopBrowsePagingInfo').text
    amountOfItems = itemCountText.split('of ')[1].split(' entries')[0].replace(',', '')
    return int(amountOfItems)
def NextPage():
    currentPageUrl = driver.current_url
    currentPage = int(currentPageUrl.split('p=')[1])
    nextPage = currentPage + 1
    if nextPage > math.ceil(itemsOnTheWorkshop/30):
        print("Pages completed")
        pagesOutOfRange = True
        return
    nextPageUrl = currentPageUrl.split('p=')[0] + 'p=' + str(nextPage)
    driver.get(nextPageUrl)
def GetWorkShopItems():
    try:
        wait.until(lambda driver: len(driver.find_elements(By.CSS_SELECTOR, 'div.workshopItem')) > 0)
    except TimeoutException:
        print("Timed out waiting for page to load")
        return []
    workShopItems = driver.find_elements(By.CSS_SELECTOR, 'div.workshopItem')
    return workShopItems
def get_user_details_with_retry(user_id, retries=5, delay=1):
    for _ in range(retries):
        try:
            user = steam.users.get_user_details(user_id)
            return user
        except requests.exceptions.RequestException as e:
            print(f"Request failed with error {e}. Retrying...")
            time.sleep(delay)
    print("Failed to get user details after multiple retries")
    return None
def ExtractWorkshopItemElementContent(listOfWorkshopItemElements):
    workshopItems = []
    for item in listOfWorkshopItemElements:
        data = get_workshop_item_info(item)

        workShopItem = data['response']['publishedfiledetails'][0]
        user = get_user_details_with_retry(workShopItem['creator'])

        #Get Title of workshop item
        title = workShopItem['title']
        #Get AuthorID of workshop item
        authorID = workShopItem['creator']
        #Get Author Name of workshop item
        authorName = user['player']['personaname']
        #Get Country of Author
        country = detect_country(user)
        #Get language of workshop item
        detectedLanguage = detect_language(user, workShopItem)
        #Get date posted of workshop item
        time_created = datetime.fromtimestamp(workShopItem['time_created'])
        #Get tags of workshop item
        tags = get_tags(workShopItem['tags'])
        #Get type of workshop item ("Model" or "Level")
        if('Model' in tags):
            itemType = "Model"
        elif('Levels' in tags):
            itemType = "Level"
        elif('Lobbies' in tags):
            itemType = "Lobby"
        else:
            itemType = "N/A"
        #create a new workshop item object and append it to list.
        workshopItems.append(WorkshopItem(title, authorID, authorName, detectedLanguage, country, time_created, tags, itemType))
        ProgressBar(len(content) + len(workshopItems), itemsOnTheWorkshop)
    return workshopItems
def get_workshop_item_info(item):
    params = {
            'key': KEY,
            'itemcount': 1,
            'publishedfileids[0]': item.find_element(By.CSS_SELECTOR, 'a').get_attribute('data-publishedfileid')
        }
    response = requests.post(url, data=params)
    data = response.json()
    return data
def detect_language(user, workShopItem):
    #chinese override, if the user's country is already display as China, then the language is Chinese
    if(detect_country(user) == 'CN'):
        return 'zh-cn'
    strings = []
    if user is None:
        pass
    else:
        if('personaname' in user['player']):
            strings.append(user['player']['personaname'])
        if('realname' in user['player']):
            strings.append(user['player']['realname'])
        if('bio' in user['player']):
            strings.append(user['player']['bio'])
    if workShopItem is None:
        pass
    else:
        if('title' in workShopItem):
            strings.append(workShopItem['title'])
        if('description' in workShopItem):
            strings.append(workShopItem['description'])
    newString = ""
    for string in strings:
        newString = newString + ", " + string
    try:
        detected_language = detect(newString)
    except:
        detected_language = "N/A"

    #Chinese override (Example: if a player has a chinese username, but is using english in title/description of the item,
    #the language might be detected as english, but we want to override that and set it to chinese)
    if 'zh' not in detected_language:
        for string in strings:
            try:
                if 'zh' in detect(string):
                    detected_language = 'zh-cn'
                    break
            except:
                continue
    return detected_language
def detect_country(user):
    if('loccountrycode' in user['player']):
        return user['player']['loccountrycode']
    else:
        return "N/A"
def get_tags(tags):
    tag_strings = [tag['tag'] for tag in tags]
    tag_string = ', '.join(tag_strings)
    return tag_string

def ProgressBar(progress, total):
    percent = (progress/float(total)) * 100
    bar = 'â–ˆ' * int(percent) + '-' * (100 - int(percent))
    print(f"\r|{bar}| {percent:.2f}%", end="\r")
    if(progress == total):
        print("\n")
def WriteToExcel(content):
    workbook = xlsxwriter.Workbook('workshop_items.xlsx')
    worksheet = workbook.add_worksheet()
    worksheet.write('A1', 'Title')
    worksheet.write('B1', 'Author Profile Link')
    worksheet.write('C1', 'Author Name')
    worksheet.write('D1', 'Detected Language')
    worksheet.write('E1', 'Country')
    worksheet.write('F1', 'Date Posted')
    worksheet.write('G1', 'Tags')
    worksheet.write('H1', 'Type')
    row = 1
    for i in content:
        worksheet.write(row, 0, i.title)
        worksheet.write(row, 1, f"https://steamcommunity.com/profiles/{i.authorID}")
        worksheet.write(row, 2, i.authorName)
        worksheet.write(row, 3, i.detectedLanguage)
        worksheet.write(row, 4, i.country)
        worksheet.write(row, 5, i.date_posted.strftime('%Y-%m-%d %H:%M:%S'))
        worksheet.write(row, 6, i.tags)
        worksheet.write(row, 7, i.itemType)
        row += 1
    workbook.close()
def WriteToTXT(content):
    for i in content:
       with open('workshop_items.txt', 'ab') as file:
        file.write(f"Title: {i.title}\nAuthor Profile Link: https://steamcommunity.com/profiles/{i.authorID}\nAuthor Name: {i.authorName}\nDetected Language: {i.detectedLanguage}\nCountry: {i.country}\nDate Posted: {i.date_posted}\nTags: {i.tags}\n\n".encode('utf-8'))
  


link = "https://steamcommunity.com/workshop/browse/?appid=477160&searchtext=&childpublishedfileid=0&browsesort=mostrecent&section=readytouseitems&requiredtags%5B%5D=Levels&created_date_range_filter_start=0&created_date_range_filter_end=0&updated_date_range_filter_start=0&updated_date_range_filter_end=0&p=1"


startDate = input("Enter the start date (YYYY-MM-DD): ")
endDate = input("Enter the end date (YYYY-MM-DD): ")
unixStartDate = int(time.mktime(datetime.strptime(startDate, "%Y-%m-%d").timetuple()))
unixEndDate = int(time.mktime(datetime.strptime(endDate, "%Y-%m-%d").timetuple()))
link = "https://steamcommunity.com/workshop/browse/?appid=477160&searchtext=&childpublishedfileid=0&browsesort=mostrecent&section=readytouseitems&created_date_range_filter_start="+unixStartDate+"&created_date_range_filter_end="+unixEndDate+"&updated_date_range_filter_start=0&updated_date_range_filter_end=0&p=1"
#region ChromeDriver 
options = Options()
# options.add_argument("--headless")
options.add_argument("--disable-gpu")
options.add_argument("--window-size=1920,1080")
options.add_argument("--log-level=3")
driver = webdriver.Chrome(service=Service(r"C:\Users\megaz\Downloads\chromedriver-win64\chromedriver-win64\chromedriver.exe"), options=options)
driver.get(link)
wait = WebDriverWait(driver, 60)
#endregion

url = f"https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/"
content = []
itemsOnTheWorkshop = GetAmountOfItems()
pagesOutOfRange = False

ProgressBar(len(content), itemsOnTheWorkshop)
while(len(content) < itemsOnTheWorkshop and not pagesOutOfRange):
    try:
        contentThisIteration = ExtractWorkshopItemElementContent(GetWorkShopItems())
        content = content + contentThisIteration
        NextPage()
        WriteToTXT(contentThisIteration)
        time.sleep(10)
    except Exception as e:
        print("\n")
        print(f"An error occurred: {e}")
        print("Moving to the next page.")
        continue
print("Program finished.")

WriteToExcel(content)